BEGIN;
BEGIN
EXPLAIN
select
	o_year,
	sum(case
		when nation = 'VIETNAM' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'ASIA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'SMALL PLATED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=23329179.04..23329180.87 rows=731 width=42)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   ->  HashAggregate  (cost=23329127.82..23329144.27 rows=731 width=42)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         ->  Hash Join  (cost=5775625.29..23324210.16 rows=245883 width=42)
               Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
               ->  Hash Join  (cost=5775623.72..23319874.91 rows=245883 width=20)
                     Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                     ->  Hash Join  (cost=5727046.72..23261404.22 rows=245916 width=20)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=5083303.04..22581387.50 rows=1229580 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop  (cost=4137.86..17180124.38 rows=4049025 width=20)
                                       ->  Bitmap Heap Scan on part  (cost=4137.29..283614.88 rows=134287 width=4)
                                             Recheck Cond: ((p_type)::text = 'SMALL PLATED STEEL'::text)
                                             ->  Bitmap Index Scan on part_p_type_p_partkey_idx  (cost=0.00..4103.72 rows=134287 width=0)
                                                   Index Cond: ((p_type)::text = 'SMALL PLATED STEEL'::text)
                                       ->  Index Scan using lineitem_l_partkey_l_quantity_l_shipmode_idx on lineitem  (cost=0.57..125.51 rows=31 width=24)
                                             Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=4283402.86..4283402.86 rows=45778665 width=12)
                                       ->  Bitmap Heap Scan on orders  (cost=974427.89..4283402.86 rows=45778665 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on orders_o_orderdate_o_orderkey_idx  (cost=0.00..962983.22 rows=45778665 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                           ->  Hash  (cost=594524.69..594524.69 rows=3000000 width=4)
                                 ->  Hash Join  (cost=2.69..594524.69 rows=3000000 width=4)
                                       Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on customer  (cost=0.00..508272.00 rows=15000000 width=8)
                                       ->  Hash  (cost=2.62..2.62 rows=5 width=4)
                                             ->  Nested Loop  (cost=0.00..2.62 rows=5 width=4)
                                                   Join Filter: (n1.n_regionkey = region.r_regionkey)
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                         Filter: (r_name = 'ASIA'::bpchar)
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                     ->  Hash  (cost=32170.00..32170.00 rows=1000000 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..32170.00 rows=1000000 width=8)
               ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30)
(38 rows)

COMMIT;
COMMIT
